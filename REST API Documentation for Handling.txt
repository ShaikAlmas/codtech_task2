>>REST API Documentation for Handling HTTP Requests and Parsing JSON Responses
Overview:
This REST API allows clients to make HTTP requests and receive JSON responses. It includes endpoints to handle CRUD (Create, Read, Update, Delete) operations and parses JSON responses. The implementation uses Java's java.net.http.HttpClient for handling HTTP requests and manual JSON parsing without external libraries like org.json or Jackson.

>>API Endpoints
>>GET /items/{id}:

Description: Retrieves an item by its ID.
Request URL: /items/{id}
Request Method: GET
Response: JSON object with item details.
Response Example:
{
  "id": "1",
  "name": "Item 1",
  "description": "Description of Item 1"
}
>>POST /items:

Description: Creates a new item.
Request URL: /items
Request Method: POST
Request Body: JSON object with item details.
Request Example:
{
  "name": "New Item",
  "description": "Description of New Item"
}
Response: JSON object with the created item details.
>>PUT /items/{id}:

Description: Updates an existing item by its ID.
Request URL: /items/{id}
Request Method: PUT
Request Body: JSON object with updated item details.
Response: JSON object with the updated item details.
>>DELETE /items/{id}:

Description: Deletes an item by its ID.
Request URL: /items/{id}
Request Method: DELETE
Response: JSON object with a success message.
Response Example:
{
  "message": "Item successfully deleted"
}
Example Implementation:
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;
import java.util.HashMap;
import java.util.Map;

public class RestApiServer {

    public static void main(String[] args) throws IOException {
        HttpServer server = HttpServer.create(URI.create("http://localhost:8080/").toURL(), 0);

        server.createContext("/items", new ItemHandler());
        server.start();
        System.out.println("Server started on port 8080");
    }

    static class ItemHandler implements HttpHandler {
        private static Map<String, String> items = new HashMap<>();

        @Override
        public void handle(HttpExchange exchange) throws IOException {
            String method = exchange.getRequestMethod();
            String path = exchange.getRequestURI().getPath();
            String[] pathParts = path.split("/");

            if (method.equals("GET") && pathParts.length == 3) {
                handleGet(exchange, pathParts[2]);
            } else if (method.equals("POST")) {
                handlePost(exchange);
            } else if (method.equals("PUT") && pathParts.length == 3) {
                handlePut(exchange, pathParts[2]);
            } else if (method.equals("DELETE") && pathParts.length == 3) {
                handleDelete(exchange, pathParts[2]);
            } else {
                exchange.sendResponseHeaders(404, -1);
            }
        }

        private void handleGet(HttpExchange exchange, String id) throws IOException {
            String response = items.getOrDefault(id, "{}");
            exchange.sendResponseHeaders(200, response.length());
            try (OutputStream os = exchange.getResponseBody()) {
                os.write(response.getBytes());
            }
        }

        private void handlePost(HttpExchange exchange) throws IOException {
            String requestBody = new String(exchange.getRequestBody().readAllBytes());
            Map<String, String> requestMap = jsonToMap(requestBody);
            String id = String.valueOf(items.size() + 1);
            items.put(id, mapToJson(requestMap));
            String response = "{\"id\":\"" + id + "\",\"message\":\"Item created\"}";
            exchange.sendResponseHeaders(201, response.length());
            try (OutputStream os = exchange.getResponseBody()) {
                os.write(response.getBytes());
            }
        }

        private void handlePut(HttpExchange exchange, String id) throws IOException {
            if (!items.containsKey(id)) {
                exchange.sendResponseHeaders(404, -1);
                return;
            }
            String requestBody = new String(exchange.getRequestBody().readAllBytes());
            items.put(id, requestBody);
            exchange.sendResponseHeaders(204, -1);
        }

        private void handleDelete(HttpExchange exchange, String id) throws IOException {
            if (items.remove(id) == null) {
                exchange.sendResponseHeaders(404, -1);
                return;
            }
            String response = "{\"message\":\"Item successfully deleted\"}";
            exchange.sendResponseHeaders(200, response.length());
            try (OutputStream os = exchange.getResponseBody()) {
                os.write(response.getBytes());
            }
        }

        private Map<String, String> jsonToMap(String json) {
            Map<String, String> map = new HashMap<>();
            json = json.trim().substring(1, json.length() - 1); // Remove braces

            String[] pairs = json.split(",");
            for (String pair : pairs) {
                String[] keyValue = pair.split(":");
                String key = keyValue[0].trim().replaceAll("^\"|\"$", ""); // Remove quotes
                String value = keyValue[1].trim().replaceAll("^\"|\"$", ""); // Remove quotes
                map.put(key, value);
            }

            return map;
        }

        private String mapToJson(Map<String, String> map) {
            StringBuilder json = new StringBuilder("{");
            for (Map.Entry<String, String> entry : map.entrySet()) {
                json.append("\"").append(entry.getKey()).append("\":\"").append(entry.getValue()).append("\",");
            }
            if (json.length() > 1) {
                json.setLength(json.length() - 1); // Remove trailing comma
            }
            json.append("}");
            return json.toString();
        }
    }
}
>>Explanation:
HttpServer: A lightweight HTTP server included in the JDK, used to handle incoming HTTP requests.
HttpHandler: Interface to handle HTTP requests and responses. The ItemHandler class implements this interface.
CRUD Operations: The ItemHandler class includes methods for handling GET, POST, PUT, and DELETE requests.
Manual JSON Parsing: The jsonToMap and mapToJson methods manually parse JSON strings and convert maps to JSON.
This setup provides a basic REST API capable of handling HTTP requests and JSON responses without using external JSON parsing libraries.